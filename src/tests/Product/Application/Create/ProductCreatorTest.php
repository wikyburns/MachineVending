<?php
/**
 * Created by PhpStorm.
 * User: sebas
 * Date: 25/03/2020
 * Time: 12:33
 */

namespace App\Tests\Product\Application\Create;


use App\Product\Application\Create\ProductCreator;
use App\Product\Application\Create\ProductCreatorRequest;
use App\Product\Infrastructure\Persistance\InMemoryProductRepository;
use PHPUnit\Framework\TestCase;

class ProductCreatorTest extends TestCase
{

    private $repository;

    protected function setUp()
    {
        $this->repository = new InMemoryProductRepository();

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /** @test */
    public function createValidProduct()
    {
        $useCase = new ProductCreator($this->repository);
        $requestDTO = new ProductCreatorRequest('water', 1.50,10);

        $useCase->create($requestDTO);

        $this->assertNull(NULL);

    }


    /** @test */
    public function throwNotValidProductName()
    {
        $this->expectExceptionMessage('ProductName not valid, expected(juice, water, soda)');

        $useCase    = new ProductCreator($this->repository);
        $requestDTO = new ProductCreatorRequest('coca-cola', 1.50,10);

        $useCase->create($requestDTO);

    }

    /** @test */
    public function throwNotValidNegativeProductPrice()
    {
        $this->expectExceptionMessage('ProductPrice has to be positive value');

        $useCase    = new ProductCreator($this->repository);
        $requestDTO = new ProductCreatorRequest('soda', -1.50,10);

        $useCase->create($requestDTO);

    }

    /** @test */
    public function throwNotValidNegativeProductStock()
    {
        $this->expectExceptionMessage('ProductStock has to be positive value');

        $useCase    = new ProductCreator($this->repository);
        $requestDTO = new ProductCreatorRequest('soda', 1.50,-10);

        $useCase->create($requestDTO);

    }


}