<?php
/**
 * Created by PhpStorm.
 * User: sebas
 * Date: 25/03/2020
 * Time: 9:59
 */

namespace App\Tests\Coin\Application\Create;


use App\Coin\Application\Create\CoinCreator;
use App\Coin\Application\Create\CoinCreatorRequest;
use App\Coin\Infrastructure\Persistance\InMemoryCoinRepository;
use PHPUnit\Framework\TestCase;

final class CoinCreatorTest extends TestCase
{

    private $repository;

    protected function setUp()
    {
        $this->repository = new InMemoryCoinRepository();

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /** @test */
    public function createValidCoin()
    {
        $useCase = new CoinCreator($this->repository);
        $requestDTO = new CoinCreatorRequest('five_cents',0.05, 10);

        $useCase->create($requestDTO);

        $this->assertNull(NULL);

    }

    /** @test */
    public function throwNotValidCoinName()
    {

        $this->expectExceptionMessage("not valid coin name");
        $useCase = new CoinCreator($this->repository);

        $requestDTO = new CoinCreatorRequest('fifty_cents',0.05, 10);

        $useCase->create($requestDTO);

    }

    /** @test */
    public function throwNotValidCoinValue()
    {
        $this->expectExceptionMessage("not valid coin value");
        $useCase = new CoinCreator($this->repository);

        $requestDTO = new CoinCreatorRequest('five_cents',0.07, 10);

        $useCase->create($requestDTO);

    }

    /** @test */
    public function throwCoinStockCantBeNegative()
    {
        $this->expectExceptionMessage("CoinStock has to be positive");
        $useCase = new CoinCreator($this->repository);

        $requestDTO = new CoinCreatorRequest('five_cents',0.05, -10);

        $useCase->create($requestDTO);

    }

}