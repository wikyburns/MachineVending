<?php
/**
 * Created by PhpStorm.
 * User: sebas
 * Date: 25/03/2020
 * Time: 13:37
 */

namespace App\Tests\Product\Application\Buy;

use App\Coin\Application\Create\CoinCreator;
use App\Coin\Application\Create\CoinCreatorRequest;
use App\Coin\Infrastructure\Persistance\InMemoryCoinRepository;
use App\Product\Application\Buy\BuyProduct;
use App\Product\Application\Buy\BuyProductRequest;
use App\Product\Application\Create\ProductCreator;
use App\Product\Application\Create\ProductCreatorRequest;
use App\Product\Infrastructure\Persistance\InMemoryProductRepository;
use PHPUnit\Framework\TestCase;

class BuyProductTest extends TestCase
{
    private $coinRepository;
    private $productRepository;

    protected function setUp()
    {
        $this->coinRepository = new InMemoryCoinRepository();
        $this->productRepository = new InMemoryProductRepository();


        // Create a product to found in tests
        $useCase    = new ProductCreator($this->productRepository);
        $requestDTO = new ProductCreatorRequest('water', 0.65,10);
        $useCase->create($requestDTO);

        // Create the Coins to find in the tests
        $useCase = new CoinCreator($this->coinRepository);
        $requestDTO = new CoinCreatorRequest('five_cents',0.05, 10);
        $useCase->create($requestDTO);
        $requestDTO = new CoinCreatorRequest('ten_cents',0.10, 10);
        $useCase->create($requestDTO);
        $requestDTO = new CoinCreatorRequest('twenty_five_cents',0.25, 10);
        $useCase->create($requestDTO);


        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /** @test */
    public function shouldBuyProduct()
    {
        $useCase = new BuyProduct($this->productRepository, $this->coinRepository);

        $result = $useCase->buy(new BuyProductRequest('water', ...array('0.05','0.10','0.25','0.25')));


        $this->assertEquals(
            array(
                "product" => 'water',
                "product_price" => 0.65,
                "coins_inserted" => array('0.05','0.10','0.25','0.25'),
                "coins_returned" => array()
            ), $result
        );
    }

    /** @test */
    public function shouldReturnNotEnoughtMoneyForProduct()
    {

        $this->expectExceptionMessage('Price of product is greather than total value inserted');

        $useCase = new BuyProduct($this->productRepository, $this->coinRepository);
        $useCase->buy(new BuyProductRequest('water', ...array('0.05','0.10','0.25')));

    }
}
